#! /usr/bin/env node

const program = require('commander')
const tinify = require('tinify')
const chalk = require('chalk')
const ora = require('ora')
const inquirer = require('inquirer')
const fs = require('fs')
const path = require('path')

const config = require('../config/config')
const log = require('../utils/log')

program
    .parse(process.argv)


const { args } = program
if (!args.length) {
    log('  [warning] dir name is required', 'yellow')
    program.help()
}

const { key, checked } = config
if (key && checked) {
    tinify.key = key
} else {
    log('  [warning] API key is required', 'yellow')
    process.exit(1)
}

const _path = args[0]
const resolvedPath = path.resolve(process.cwd(), _path)

const spinner = ora('Loading ... ')
spinner.start()
fs.readdir(resolvedPath, (err, files) => {
    spinner.stop()
    if (err) throw err

    const filesFiltered = files.filter(file => {
        return ['.png', '.jpg'].indexOf(path.extname(file)) > -1
    })

    let msg = 'Compressed List: \n\n'
    filesFiltered.forEach(file => {
        msg += '*  ' + file + ' \n'
    })
    msg += ' \n comfirm to compress or not?'

    inquirer.prompt([{
        type: 'confirm',
        message: msg,
        name: 'ok'
    }]).then(answer => {
        if (answer.ok) {
            handleFiles(filesFiltered)
        } else {
            log(`  [message] Service finished`, 'yellow')
        }
    })
})

function handleFiles(files) {
    log(`  [message] Compressing ${files.length} images ...`, 'green')
    const hasCompressedImages = fs.existsSync(path.resolve(resolvedPath, 'CompressedImages'))
    if (hasCompressedImages) {
        handleCompress(files)
    } else {
        fs.mkdir(path.resolve(resolvedPath, 'CompressedImages'), err => {
            if (err) throw err
    
            handleCompress(files)
        })
    }
}

function handleCompress(files) {
    let count = 0
    const len = files.length
    const waiting = ora('compressing ...')
    waiting.start()
    
    files.forEach(file => {
        const source = tinify.fromFile(path.resolve(resolvedPath, file))
        source.toFile(path.resolve(resolvedPath, 'CompressedImages', file), err => {
            if (err) throw err

            count++
            log(`  [message] ${file} is compressed SUCCESS`, 'green')
            if (count === len) {
                waiting.stop()
                log(`  Thanks for using.`, 'blue')
            }
        })
    })
}